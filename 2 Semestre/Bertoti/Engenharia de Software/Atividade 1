Aula 1 - 19/02: Atividade 1
Within Google, we sometimes say, “Software engineering is programming integrated over time.” Programming is certainly a significant part of software : 
engineering after all, programming is how you generate new software in the first place. If you accept this distinction, it also becomes clear that we might 
need to delineate between programming tasks (development) and software engineering tasks (development, modification, maintenance). The addition of time adds an 
important new dimension to programming. Cubes aren’t squares, distance isn’t velocity. Software engineering isn’t programming.

We see three critical differences between programming and software engineering: time, scale, and the trade-offs at play. On a software engineering project,
engineers need to be more concerned with the passage of time and the eventual need for change. In a software engineering organization, we need to be more concerned 
about scale and efficiency, both for the software we produce as well as for the organization that is producing it. Finally, as software engineers, we are asked to 
make more complex decisions with higher-stakes outcomes, often based on imprecise estimates of time and growth.

Comentário: Este texto aborda a diferença entre programação e engenharia de software, destacando a importância do tempo, escala e os trade-off.
Na engenharia de software, os profissionais precisam considerar não apenas o desenvolvimento inicial, mas também modificações e manutenções futuras, 
além de dimensionar as decisões com base em estimativas imprecisas de tempo e crescimento. Nada em engenharia de software é mágica. 
É interessante observar como a programação é parte essencial da engenharia de software, mas não a resume por completo, já que envolve aspectos mais amplos e complexos.
